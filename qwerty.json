{
    "goto-hx": {
        "title": "Goto",
        "items": {
            "g": {
                "text": "line number <n> else file start",
                "command": "dance.select.lineStart",
                "args": [
                    {
                        "count": 1
                    }
                ]
            },
            "e": {
                "text": "last line",
                "command": "dance.select.lineStart",
                "args": [
                    {
                        "count": 2147483647
                    }
                ]
            },
            "f": {
                "text": "files in selection",
                "command": "editor.action.openLink"
            },
            "s": {
                "text": "line start",
                "command": "dance.select.lineStart"
            },
            "l": {
                "text": "line end",
                "command": "dance.select.lineEnd"
            },
            "h": {
                "text": "first non-blank in line",
                "command": "dance.select.lineStart",
                "args": [
                    {
                        "skipBlank": true
                    }
                ]
            },
            "d": {
                "text": "definition",
                "command": "editor.action.revealDefinition"
            },
            "y": {
                "text": "type definition",
                "command": "editor.action.goToTypeDefinition"
            },
            "r": {
                "text": "references",
                "command": "editor.action.goToReferences"
            },
            "i": {
                "text": "implementation",
                "command": "editor.action.goToImplementation"
            },
            "t": {
                "text": "window top",
                "command": "dance.select.firstVisibleLine"
            },
            "c": {
                "text": "window center",
                "command": "dance.select.middleVisibleLine"
            },
            "b": {
                "text": "window bottom",
                "command": "dance.select.lastVisibleLine"
            },
            "a": {
                "text": "last accessed file",
                "command": "workbench.action.previousEditorInGroup"
            },
            "m": {
                "text": "last modified file",
                "command": "???"
            },
            "p": {
                "text": "previous buffer",
                "command": "workbench.action.previousEditor"
            },
            "n": {
                "text": "next buffer",
                "command": "workbench.action.nextEditor"
            },
            "w": {
                "text": "word",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "if (Context.current.mode.name !== 'helix/select') {",
                            "await vscode.commands.executeCommand('dance.seek.wordLabel');",
                            "} else {",
                            "await vscode.commands.executeCommand('dance.seek.wordLabel.extend');",
                            "}"
                        ]
                    }
                ]
            }
        }
    },
    "match-hx": {
        "title": "Match",
        "items": {
            "m": {
                "text": "Goto matching bracket",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let shift = Context.current.mode.name !== 'helix/select' ? 'jump' : 'extend';",
                            "await vscode.commands.executeCommand('dance.seek.enclosing.backward', { shift });",
                            "if (Context.current.mode.name !== 'helix/select') {",
                            "await vscode.commands.executeCommand('dance.selections.reduce');",
                            "}"
                        ]
                    }
                ]
            },
            "s": {
                "text": "Surround add",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let pairs = ['()', '{}', '[]', '<>'];",
                            "let x = vscode.commands.executeCommand;",
                            "let c = await keypress(Context.current);",
                            "let p = pairs.find((p) => p.includes(c));",
                            "await x('dance.selections.save');",
                            "Selections.updateWithFallbackByIndex((i, sel) => new vscode.Selection(",
                            "sel.anchor,",
                            "Positions.at(sel.active.line, sel.active.character + !sel.isReversed),",
                            "));",
                            "await x('editor.action.insertSnippet', { snippet: (p?.at(0) || c) + '${TM_SELECTED_TEXT}' + (p?.at(1) || c) });",
                            "await x('dance.selections.restore');"
                        ]
                    }
                ]
            },
            "r": {
                "text": "Surround replace",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let pairs = ['()', '{}', '[]', '<>'];",
                            "let x = vscode.commands.executeCommand;",
                            "let c = await keypress(Context.current);",
                            "let p = pairs.find((p) => p.includes(c));",
                            "let o = Selections.mapByIndex((_i, sel) => sel);",
                            "await x('dance.selections.save');",
                            "Selections.updateWithFallbackByIndex((_i, sel) => new vscode.Selection(",
                            "sel.anchor,",
                            "Positions.at(sel.active.line, sel.active.character - !sel.isReversed),",
                            "));",
                            "let item = findMenu('object-hx').items[p || c]",
                            "let args = item.args.reduce((a, v) => a = Object.assign(a, v), {});",
                            "await x(item.command, args);",
                            "let s = Selections.mapByIndex((i, sel) => !o[i].isReversed ? sel : Selections.backward(sel));",
                            "await x('dance.selections.save', { register: 'surround' });",
                            "await x('dance.selections.reduce.edges');",
                            "c = await keypress(Context.current);",
                            "p = pairs.find((p) => p.includes(c));",
                            "await x('dance.edit.delete');",
                            "await x('dance.selections.restore', { register: 'surround' });",
                            "await x('dance.select.right.extend');",
                            "await x('editor.action.insertSnippet', { snippet: (p?.at(0) || c) + '${TM_SELECTED_TEXT}' + (p?.at(1) || c) });",
                            "await x('dance.selections.restore');",
                            "Selections.updateWithFallbackByIndex((i, sel) => o[i]);"
                        ]
                    }
                ]
            },
            "d": {
                "text": "Surround delete",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let pairs = ['()', '{}', '[]', '<>'];",
                            "let x = vscode.commands.executeCommand;",
                            "let c = await keypress(Context.current);",
                            "let p = pairs.find((p) => p.includes(c));",
                            "let o = Selections.mapByIndex((_i, sel) => sel);",
                            "await x('dance.selections.save');",
                            "Selections.updateWithFallbackByIndex((i, sel) => new vscode.Selection(",
                            "sel.anchor,",
                            "Positions.at(sel.active.line, sel.active.character - !sel.isReversed),",
                            "));",
                            "let item = findMenu('object-hx').items[p || c]",
                            "let args = item.args.reduce((a, v) => a = Object.assign(a, v), {});",
                            "await x(item.command, args);",
                            "let s = Selections.mapByIndex((i, sel) => !o[i].isReversed ? sel : Selections.backward(sel));",
                            "await x('dance.selections.reduce.edges');",
                            "await x('dance.edit.delete');",
                            "await x('dance.selections.restore');",
                            "Selections.updateWithFallbackByIndex((i, sel) => new vscode.Selection(",
                            "Positions.at(o[i].anchor.line, o[i].anchor.character - 1 + o[i].anchor.isEqual(s[i].anchor) * (sel.isReversed ? -1 : 1)),",
                            "Positions.at(o[i].active.line, o[i].active.character - 1 - o[i].active.isEqual(s[i].active) * (sel.isReversed ? -1 : 1)),",
                            "));"
                        ]
                    }
                ]
            },
            "a": {
                "text": "Select around object",
                "command": "dance.openMenu",
                "args": [
                    {
                        "menu": "object-hx",
                        "title": "Match around"
                    }
                ]
            },
            "i": {
                "text": "Select inside object",
                "command": "dance.openMenu",
                "args": [
                    {
                        "menu": "object-hx",
                        "title": "Match inside",
                        "pass": [
                            {
                                "inner": true,
                                "open": false
                            }
                        ]
                    }
                ]
            },
            " ": {
                "text": "Select by indentation",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#predefined=indent)"
                    }
                ]
            },
            "w": {
                "text": "Word",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "[\\p{L}_\\d]+(?<after>[^\\S\\n]+)"
                    }
                ]
            },
            "W": {
                "text": "WORD",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "[\\S]+(?<after>[^\\S\\n]+)"
                    }
                ]
            },
            "p": {
                "text": "Paragraph",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#predefined=paragraph)"
                    }
                ]
            },
            "t": {
                "text": "Type definition",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "f": {
                "text": "Function",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "c": {
                "text": "Comment",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "T": {
                "text": "Test",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "()": {
                "text": "Parentheses",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "\\((?#inner)\\)"
                    }
                ]
            },
            "{}": {
                "text": "Braces",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "\\{(?#inner)\\}"
                    }
                ]
            },
            "[]": {
                "text": "Brackets",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "\\[(?#inner)\\]"
                    }
                ]
            },
            "<>": {
                "text": "Angle brackets",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "<(?#inner)>"
                    }
                ]
            },
            "\"": {
                "text": "Double quotes",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#noescape)\"(?#inner)(?#noescape)\""
                    }
                ]
            },
            "'": {
                "text": "Single quotes",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#noescape)'(?#inner)(?#noescape)'"
                    }
                ]
            },
            "`": {
                "text": "Grave quotes",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#noescape)`(?#inner)(?#noescape)`"
                    }
                ]
            }
        }
    },
    "object-hx": {
        "items": {
            "w": {
                "text": "Word",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "[\\p{L}_\\d]+(?<after>[^\\S\\n]+)"
                    }
                ]
            },
            "W": {
                "text": "WORD",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "[\\S]+(?<after>[^\\S\\n]+)"
                    }
                ]
            },
            "p": {
                "text": "Paragraph",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#predefined=paragraph)"
                    }
                ]
            },
            "t": {
                "text": "Type definition",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "f": {
                "text": "Function",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "a": {
                "text": "Argument/parameter",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#predefined=argument)"
                    }
                ]
            },
            "c": {
                "text": "Comment",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "T": {
                "text": "Test",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "???"
                    }
                ]
            },
            "m": {
                "text": "Closest surrounding pair to cursor",
                "command": "dance.seek.enclosing"
            },
            "()": {
                "text": "Parentheses",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "\\((?#inner)\\)"
                    }
                ]
            },
            "{}": {
                "text": "Braces",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "\\{(?#inner)\\}"
                    }
                ]
            },
            "[]": {
                "text": "Brackets",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "\\[(?#inner)\\]"
                    }
                ]
            },
            "<>": {
                "text": "Angle brackets",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "<(?#inner)>"
                    }
                ]
            },
            "\"": {
                "text": "Double quotes",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#noescape)\"(?#inner)(?#noescape)\""
                    }
                ]
            },
            "'": {
                "text": "Single quotes",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#noescape)'(?#inner)(?#noescape)'"
                    }
                ]
            },
            "`": {
                "text": "Grave quotes",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "(?#noescape)`(?#inner)(?#noescape)`"
                    }
                ]
            },
            " ": {
                "text": "Whitespace",
                "command": "dance.seek.object",
                "args": [
                    {
                        "input": "[ \t](?#inner)[ \t]"
                    }
                ]
            }
        }
    },
    "view-hx": {
        "title": "View",
        "items": {
            "cz": {
                "text": "Align view center",
                "command": "dance.view.line",
                "args": [
                    {
                        "at": "center"
                    }
                ]
            },
            "t": {
                "text": "Align view top",
                "command": "dance.view.line",
                "args": [
                    {
                        "at": "top"
                    }
                ]
            },
            "b": {
                "text": "Align view bottom",
                "command": "dance.view.line",
                "args": [
                    {
                        "at": "bottom"
                    }
                ]
            },
            "m": {
                "text": "Align view middle",
                "command": "???"
            },
            "k": {
                "text": "Scroll view up",
                "command": "editorScroll",
                "args": [
                    {
                        "by": "line",
                        "revealCursor": true,
                        "to": "up"
                    }
                ]
            },
            "j": {
                "text": "Scroll view down",
                "command": "editorScroll",
                "args": [
                    {
                        "by": "line",
                        "revealCursor": true,
                        "to": "down"
                    }
                ]
            },
            "/": {
                "text": "Search for regex pattern",
                "command": "dance.search"
            },
            "?": {
                "text": "Reverse search for regex pattern",
                "command": "dance.search.backward"
            },
            "n": {
                "text": "Select next search match",
                "command": "dance.search.next"
            },
            "N": {
                "text": "Select previous search match",
                "command": "dance.search.previous"
            }
        }
    },
    "window-hx": {
        "title": "View",
        "items": {
            "h": {
                "text": "Jump to the split on the left",
                "command": "workbench.action.focusLeftGroup"
            },
            "j": {
                "text": "Jump to the split below",
                "command": "workbench.action.focusBelowGroup"
            },
            "k": {
                "text": "Jump to the split above",
                "command": "workbench.action.focusAboveGroup"
            },
            "l": {
                "text": "Jump to the split to the right",
                "command": "workbench.action.focusRightGroup"
            },
            "L": {
                "text": "Move editor to the right",
                "command": "workbench.action.moveEditorToRightGroup"
            },
            "K": {
                "text": "Move editor above",
                "command": "workbench.action.moveEditorToAboveGroup"
            },
            "H": {
                "text": "Move editor to the left",
                "command": "workbench.action.moveEditorToLeftGroup"
            },
            "J": {
                "text": "Move editor below",
                "command": "workbench.action.moveEditorToBelowGroup"
            },
            "w": {
                "text": "Goto next window",
                "command": "workbench.action.focusNextGroup"
            },
            "s": {
                "text": "Horizontal bottom split",
                "command": "workbench.action.splitEditorDown"
            },
            "v": {
                "text": "Vertical right split",
                "command": "workbench.action.splitEditorRight"
            },
            "t": {
                "text": "Transpose splits",
                "command": "workbench.action.toggleEditorGroupLayout"
            },
            "f": {
                "text": "Goto files in selection (hsplit)",
                "command": "???"
            },
            "F": {
                "text": "Goto files in selection (vsplit)",
                "command": "???"
            },
            "q": {
                "text": "Close tab",
                "command": "workbench.action.closeActiveEditor"
            },
            "n": {
                "text": "New split scratch buffer",
                "command": "dance.openMenu",
                "args": [
                    {
                        "menu": "new-window-hx"
                    }
                ]
            }
        }
    },
    "new-window-hx": {
        "title": "New split scratch buffer",
        "items": {
            "s": {
                "text": "Horizontal bottom split scratch buffer",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            "workbench.action.splitEditorDown",
                            "workbench.action.files.newUntitledFile"
                        ]
                    }
                ]
            },
            "v": {
                "text": "Vertical right split scratch buffer",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            "workbench.action.splitEditorRight",
                            "workbench.action.files.newUntitledFile"
                        ]
                    }
                ]
            }
        }
    },
    "left-bracket-hx": {
        "title": "Left bracket",
        "items": {
            "d": {
                "text": "Goto previous diagnostic",
                "command": "editor.action.marker.prevInFiles"
            },
            "D": {
                "text": "Goto first diagnostic",
                "command": "???"
            },
            "g": {
                "text": "Goto previous change",
                "command": "workbench.action.editor.previousChange"
            },
            "G": {
                "text": "Goto first change",
                "command": "???"
            },
            "f": {
                "text": "Goto previous function",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            "breadcrumbs.focusAndSelect",
                            "list.focusUp",
                            "list.select"
                        ]
                    }
                ]
            },
            "t": {
                "text": "Goto previous type definition",
                "command": "???"
            },
            "a": {
                "text": "Goto previous parameter",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let pos = Selections.mapByIndex((_i, sel, document) => Objects.argument.start(Positions.previous(sel.active)));",
                            "if (Context.current.mode.name !== 'helix/select') {",
                            "await vscode.commands.executeCommand('dance.selections.reduce');",
                            "}",
                            "Selections.updateWithFallbackByIndex((i, sel, document) => new vscode.Selection(sel.anchor, pos[i], undefined, document));"
                        ]
                    }
                ]
            },
            "c": {
                "text": "Goto previous comment",
                "command": "???"
            },
            "T": {
                "text": "Goto previous test",
                "command": "???"
            },
            "p": {
                "text": "Goto previous paragraph",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let pos = Selections.mapByIndex((_i, sel, document) => Objects.paragraph.start(Positions.previous(sel.active)));",
                            "if (Context.current.mode.name !== 'helix/select') {",
                            "await vscode.commands.executeCommand('dance.selections.reduce');",
                            "}",
                            "Selections.updateWithFallbackByIndex((i, sel, document) => new vscode.Selection(sel.anchor, pos[i], undefined, document));"
                        ]
                    }
                ]
            },
            " ": {
                "text": "Add newline above",
                "command": "dance.edit.newLine.above"
            }
        }
    },
    "right-bracket-hx": {
        "title": "Right bracket",
        "items": {
            "d": {
                "text": "Goto next diagnostic",
                "command": "editor.action.marker.nextInFiles"
            },
            "D": {
                "text": "Goto last diagnostic",
                "command": "???"
            },
            "g": {
                "text": "Goto next change",
                "command": "workbench.action.editor.nextChange"
            },
            "G": {
                "text": "Goto last change",
                "command": "???"
            },
            "f": {
                "text": "Goto next function",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            "breadcrumbs.focusAndSelect",
                            "list.focusDown",
                            "list.select"
                        ]
                    }
                ]
            },
            "t": {
                "text": "Goto next type definition",
                "command": "???"
            },
            "a": {
                "text": "Goto next parameter",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let pos = Selections.mapByIndex((_i, sel, document) => Objects.argument.end(sel.active));",
                            "if (Context.current.mode.name !== 'helix/select') {",
                            "await vscode.commands.executeCommand('dance.selections.reduce');",
                            "}",
                            "Selections.updateWithFallbackByIndex((i, sel, document) => new vscode.Selection(sel.anchor, pos[i], undefined, document));"
                        ]
                    }
                ]
            },
            "c": {
                "text": "Goto next comment",
                "command": "???"
            },
            "T": {
                "text": "Goto next test",
                "command": "???"
            },
            "p": {
                "text": "Goto next paragraph",
                "command": "dance.run",
                "args": [
                    {
                        "code": [
                            "let pos = Selections.mapByIndex((_i, sel, document) => Objects.paragraph.end(sel.active));",
                            "if (Context.current.mode.name !== 'helix/select') {",
                            "await vscode.commands.executeCommand('dance.selections.reduce');",
                            "}",
                            "Selections.updateWithFallbackByIndex((i, sel, document) => new vscode.Selection(sel.anchor, pos[i], undefined, document));"
                        ]
                    }
                ]
            },
            " ": {
                "text": "Add newline below",
                "command": "dance.edit.newLine.below"
            }
        }
    },
    "ui-hx": {
        "title": "UI",
        "items": {
            "b": {
                "text": "Toggle sidebar",
                "command": "workbench.action.toggleSidebarVisibility"
            },
            "e": {
                "text": "Explorer",
                "command": "workbench.view.explorer"
            },
            "f": {
                "text": "Find in Files",
                "command": "workbench.action.findInFiles"
            },
            "g": {
                "text": "Source control",
                "command": "workbench.view.scm"
            },
            "x": {
                "text": "Extensions",
                "command": "workbench.view.extensions"
            },
            "d": {
                "text": "Debug",
                "command": "workbench.view.debug"
            }
        }
    },
    "leader-hx": {
        "title": "Space",
        "items": {
            "f": {
                "text": "Open file picker",
                "command": "workbench.action.quickOpen"
            },
            "F": {
                "text": "Open file picker at current working directory",
                "command": "???"
            },
            "b": {
                "text": "Open buffer picker",
                "command": "workbench.action.showAllEditors"
            },
            "j": {
                "text": "Open jumplist picker",
                "command": "???"
            },
            "s": {
                "text": "Open symbol picker",
                "command": "workbench.action.gotoSymbol"
            },
            "S": {
                "text": "Open workspace symbol picker",
                "command": "workbench.action.showAllSymbols"
            },
            "d": {
                "text": "Select next symbol reference",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            "editor.action.addSelectionToNextFindMatch"
                        ]
                    }
                ]
            },
            "D": {
                "text": "Open workspace diagnostic picker",
                "command": "???"
            },
            "a": {
                "text": "Perform code action",
                "command": "editor.action.quickFix"
            },
            "'": {
                "text": "Open last picker",
                "command": "???"
            },
            "g": {
                "text": "Debug",
                "command": "editor.debug.action.toggleBreakpoint"
            },
            "w": {
                "text": "Window",
                "command": "dance.openMenu",
                "args": [
                    {
                        "menu": "window-hx"
                    }
                ]
            },
            "y": {
                "text": "Join and yank selections to clipboard",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            [
                                "dance.selections.saveText",
                                {
                                    "register": "dquote"
                                }
                            ],
                            ".modes.set.normal"
                        ]
                    }
                ]
            },
            "Y": {
                "text": "Yank main selection to clipboard",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            [
                                "dance.selections.saveText",
                                {
                                    "register": "dquote"
                                }
                            ],
                            ".modes.set.normal"
                        ]
                    }
                ]
            },
            "p": {
                "text": "Paste clipboard after selections",
                "command": "dance.edit.insert",
                "args": [
                    {
                        "handleNewLine": true,
                        "where": "end"
                    }
                ]
            },
            "P": {
                "text": "Paste clipboard before selections",
                "command": "dance.edit.insert",
                "args": [
                    {
                        "handleNewLine": true,
                        "where": "start"
                    }
                ]
            },
            "R": {
                "text": "Replace selections by clipboard content",
                "command": "dance.edit.insert",
                "args": [
                    {
                        "register": "dquote"
                    }
                ]
            },
            "/": {
                "text": "Global search in workspace folder",
                "command": "search.action.openEditor"
            },
            "k": {
                "text": "Show docs for item under cursor",
                "command": "editor.action.showHover"
            },
            "r": {
                "text": "Rename symbol",
                "command": "editor.action.rename"
            },
            "h": {
                "text": "Select symbol references",
                "command": "dance.run",
                "args": [
                    {
                        "commands": [
                            "editor.action.selectHighlights"
                        ]
                    }
                ]
            },
            "?": {
                "text": "Open command palette",
                "command": "workbench.action.showCommands"
            },
            "x": {
                "text": "Copy file name without extensions",
                "command": "extension.copyFileNameNoExtensionOfActiveFile"
            },
            "X": {
                "text": "Copy relative path to file",
                "command": "copyRelativeFilePath"
            }
        }
    }
}
